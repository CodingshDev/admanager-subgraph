# Representa estatísticas globais para todo o sistema
type GlobalStats @entity {
  id: ID!
  totalAdvertisements: BigInt!
  totalEngagements: BigInt!
  totalUsers: BigInt!
  totalRewardsMinted: BigInt!
}

# Representa um usuário no sistema
type User @entity {
  id: ID!
  address: Bytes!
  level: BigInt!
  reputation: BigInt!
  achievementsCount: BigInt!
  engagementsCount: BigInt!
  totalRewardsEarned: BigInt!
  referrals: [User!]! @derivedFrom(field: "referrer")
  referrer: User
  advertisements: [Advertisement!]! @derivedFrom(field: "advertiser")
}

type Advertisement @entity {
  id: ID!
  link: String!
  imageUrl: String!
  price: BigInt!
  advertiser: User!
  referrer: User
  engagementsCount: BigInt!
  active: Boolean!
  engagements: [EngagementRecorded!]! @derivedFrom(field: "advertisement")
}

type AchievementUnlocked @entity {
  id: Bytes!
  user: User!
  achievementId: BigInt!
  name: String!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type AdvertisementDeactivated @entity {
  id: Bytes!
  advertisement: Advertisement!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type EngagementRecorded @entity {
  id: Bytes!
  advertisement: Advertisement!
  user: User!
  timestamp: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type EngagementRewardMinted @entity {
  id: Bytes!
  user: User!
  amount: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type LevelUp @entity {
  id: Bytes!
  user: User!
  newLevel: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type NewAdvertisement @entity {
  id: Bytes!
  advertisement: Advertisement!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type NewChiefOfAdvertising @entity {
  id: Bytes!
  newChief: User!
  tokenBalance: BigInt!
  referralLevel: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type NewCommunityChallenge @entity {
  id: Bytes!
  description: String!
  goal: BigInt!
  reward: BigInt!
  deadline: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type NewReferral @entity {
  id: Bytes!
  referred: User!
  referrer: User!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Paused @entity {
  id: Bytes!
  account: Bytes!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ReferralRewardDistributed @entity {
  id: Bytes!
  referrer: User!
  reward: BigInt!
  level: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ReputationUpdated @entity {
  id: Bytes!
  user: User!
  newReputation: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RoleAdminChanged @entity {
  id: Bytes!
  role: Bytes!
  previousAdminRole: Bytes!
  newAdminRole: Bytes!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RoleGranted @entity {
  id: Bytes!
  role: Bytes!
  account: Bytes!
  sender: Bytes!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RoleRevoked @entity {
  id: Bytes!
  role: Bytes!
  account: Bytes!
  sender: Bytes!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type SpecialEventStarted @entity {
  id: Bytes!
  name: String!
  startTime: BigInt!
  endTime: BigInt!
  rewardMultiplier: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Unpaused @entity {
  id: Bytes!
  account: Bytes!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type WeeklyBonusMinted @entity {
  id: Bytes!
  user: User!
  amount: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type WithdrawCompleted @entity {
  id: Bytes!
  owner: User!
  amount: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
